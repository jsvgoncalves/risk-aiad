package logic;

import jade.core.AID;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import perceptions.Perception;

import util.R;

public class Board implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -5291057040352837133L;

	// List of all territories in the world
	HashMap<String, Territory> territories = new HashMap<String, Territory>();
	// List of allocations of every player
	// Territory -> Player
	private HashMap<String, String> allocations = new HashMap<String, String>();

	public Board() {
		initTerritories();
	}

	public Territory getTerritory(String string) {
		return territories.get(string);
	}

	public HashMap<String, Territory> getTerritories() {
		return territories;
	}

	/**
	 * Initializes all the territories and their adjacencies
	 */
	private void initTerritories() {
		/*
		 * Territories
		 */

		// EUROPE
		Territory EU_IBE = new Territory("Iberia", R.EU_IBE_KEY);
		Territory EU_FR = new Territory("France", R.EU_FR_KEY);
		Territory EU_IT = new Territory("Italy", R.EU_IT_KEY);
		Territory EU_CEN = new Territory("CEN Europe", R.EU_CEN_KEY);
		Territory EU_BAL = new Territory("Balkans", R.EU_BAL_KEY);
		Territory EU_BRI = new Territory("British Isles", R.EU_BRI_KEY);
		Territory EU_ICE = new Territory("Iceland", R.EU_ICE_KEY);
		Territory EU_SCA = new Territory("Scandinavia", R.EU_SCA_KEY);
		Territory EU_EAS = new Territory("Eastern Europe", R.EU_EAS_KEY);
		Territory EU_RUS = new Territory("European Russia", R.EU_RUS_KEY);

		// ASIA
		Territory AS_YAM = new Territory("Yamalia", R.AS_YAM_KEY);
		Territory AS_STA = new Territory("The Stans", R.AS_STA_KEY);
		Territory AS_MEA = new Territory("Middle East", R.AS_MEA_KEY);
		Territory AS_ARA = new Territory("Arabia", R.AS_ARA_KEY);
		Territory AS_SAK = new Territory("Sakha", R.AS_SAK_KEY);
		Territory AS_MON = new Territory("Mongolia", R.AS_MON_KEY);
		Territory AS_CHI = new Territory("China", R.AS_CHI_KEY);
		Territory AS_IND = new Territory("India", R.AS_IND_KEY);
		Territory AS_INO = new Territory("Indochina", R.AS_INO_KEY);
		Territory AS_MAC = new Territory("Manchuria", R.AS_MAC_KEY);
		Territory AS_CHU = new Territory("Chukotka", R.AS_CHU_KEY);
		Territory AS_JAP = new Territory("Japan", R.AS_JAP_KEY);

		// OCEANIA
		Territory OC_BOR = new Territory("Borneo", R.OC_BOR_KEY);
		Territory OC_EAS = new Territory("East Indies", R.OC_EAS_KEY);
		Territory OC_OUT = new Territory("Outback", R.OC_OUT_KEY);
		Territory OC_AUS = new Territory("Eastern Australia", R.OC_AUS_KEY);
		Territory OC_NEW = new Territory("New Zealand", R.OC_NEW_KEY);

		// ANTARCTICA
		Territory AN_WIL = new Territory("Wilkes Land", R.AN_WIL_KEY);
		Territory AN_QUE = new Territory("Queen Maud Land", R.AN_QUE_KEY);
		Territory AN_MAR = new Territory("Marie Byrd Land", R.AN_MAR_KEY);

		// AFRICA
		Territory AF_NIL = new Territory("Nile", R.AF_NIL_KEY);
		Territory AF_THE = new Territory("The Horn", R.AF_THE_KEY);
		Territory AF_CAP = new Territory("Cape of Good Hope", R.AF_CAP_KEY);
		Territory AF_MAD = new Territory("Madagascar", R.AF_MAD_KEY);
		Territory AF_ZAI = new Territory("Zaire", R.AF_ZAI_KEY);
		Territory AF_MAG = new Territory("Maghreb", R.AF_MAG_KEY);

		// SOUTH AMERICA
		Territory SA_PAR = new Territory("Parana", R.SA_PAR_KEY);
		Territory SA_AMA = new Territory("Amazonas", R.SA_AMA_KEY);
		Territory SA_BOL = new Territory("Bolivia", R.SA_BOL_KEY);
		Territory SA_ARG = new Territory("Argentina", R.SA_ARG_KEY);
		Territory SA_PER = new Territory("Peru", R.SA_PER_KEY);
		Territory SA_COL = new Territory("Columbia", R.SA_COL_KEY);

		// NORTH AMERICA
		Territory NA_MEX = new Territory("Mexico", R.NA_MEX_KEY);
		Territory NA_CAR = new Territory("Caribbean", R.NA_CAR_KEY);
		Territory NA_SUN = new Territory("Sunbelt", R.NA_SUN_KEY);
		Territory NA_PAC = new Territory("Pacifica", R.NA_PAC_KEY);
		Territory NA_PLA = new Territory("Great Plains", R.NA_PLA_KEY);
		Territory NA_EAS = new Territory("East Seaboard", R.NA_EAS_KEY);
		Territory NA_LAW = new Territory("St Lawrence", R.NA_LAW_KEY);
		Territory NA_NUN = new Territory("Nunavut", R.NA_NUN_KEY);
		Territory NA_KLO = new Territory("Klondike", R.NA_KLO_KEY);
		Territory NA_GRE = new Territory("Greenland", R.NA_GRE_KEY);

		/*
		 * Add
		 */

		// EUROPE
		territories.put(EU_IBE.getKey(), EU_IBE);
		territories.put(EU_FR.getKey(), EU_FR);
		territories.put(EU_IT.getKey(), EU_IT);
		territories.put(EU_CEN.getKey(), EU_CEN);
		territories.put(EU_BAL.getKey(), EU_BAL);
		territories.put(EU_BRI.getKey(), EU_BRI);
		territories.put(EU_ICE.getKey(), EU_ICE);
		territories.put(EU_SCA.getKey(), EU_SCA);
		territories.put(EU_EAS.getKey(), EU_EAS);
		territories.put(EU_RUS.getKey(), EU_RUS);

		// Asia
		territories.put(AS_YAM.getKey(), AS_YAM);
		territories.put(AS_STA.getKey(), AS_STA);
		territories.put(AS_MEA.getKey(), AS_MEA);
		territories.put(AS_ARA.getKey(), AS_ARA);
		territories.put(AS_SAK.getKey(), AS_SAK);
		territories.put(AS_MON.getKey(), AS_MON);
		territories.put(AS_MAC.getKey(), AS_MAC);
		territories.put(AS_CHI.getKey(), AS_CHI);
		territories.put(AS_IND.getKey(), AS_IND);
		territories.put(AS_INO.getKey(), AS_INO);
		territories.put(AS_CHU.getKey(), AS_CHU);
		territories.put(AS_JAP.getKey(), AS_JAP);

		// Oceania
		territories.put(OC_BOR.getKey(), OC_BOR);
		territories.put(OC_EAS.getKey(), OC_EAS);
		territories.put(OC_OUT.getKey(), OC_OUT);
		territories.put(OC_AUS.getKey(), OC_AUS);
		territories.put(OC_NEW.getKey(), OC_NEW);

		// Antarctica
		territories.put(AN_WIL.getKey(), AN_WIL);
		territories.put(AN_QUE.getKey(), AN_QUE);
		territories.put(AN_MAR.getKey(), AN_MAR);

		// Africa
		territories.put(AF_NIL.getKey(), AF_NIL);
		territories.put(AF_THE.getKey(), AF_THE);
		territories.put(AF_MAD.getKey(), AF_MAD);
		territories.put(AF_CAP.getKey(), AF_CAP);
		territories.put(AF_ZAI.getKey(), AF_ZAI);
		territories.put(AF_MAG.getKey(), AF_MAG);

		// South America
		territories.put(SA_PAR.getKey(), SA_PAR);
		territories.put(SA_AMA.getKey(), SA_AMA);
		territories.put(SA_BOL.getKey(), SA_BOL);
		territories.put(SA_ARG.getKey(), SA_ARG);
		territories.put(SA_PER.getKey(), SA_PER);
		territories.put(SA_COL.getKey(), SA_COL);

		// North America
		territories.put(NA_MEX.getKey(), NA_MEX);
		territories.put(NA_CAR.getKey(), NA_CAR);
		territories.put(NA_SUN.getKey(), NA_SUN);
		territories.put(NA_PAC.getKey(), NA_PAC);
		territories.put(NA_EAS.getKey(), NA_EAS);
		territories.put(NA_PLA.getKey(), NA_PLA);
		territories.put(NA_LAW.getKey(), NA_LAW);
		territories.put(NA_NUN.getKey(), NA_NUN);
		territories.put(NA_KLO.getKey(), NA_KLO);
		territories.put(NA_GRE.getKey(), NA_GRE);

		/*
		 * Borders
		 */

		// EUROPE
		EU_IBE.setAdjacent(EU_FR);
		EU_FR.setAdjacent(EU_CEN);
		EU_FR.setAdjacent(EU_BRI);
		EU_FR.setAdjacent(EU_IT);
		EU_IT.setAdjacent(EU_CEN);
		EU_CEN.setAdjacent(EU_BAL);
		EU_CEN.setAdjacent(EU_EAS);
		EU_BRI.setAdjacent(EU_ICE);
		EU_BRI.setAdjacent(EU_SCA);
		EU_ICE.setAdjacent(EU_SCA);
		EU_SCA.setAdjacent(EU_RUS);
		EU_BAL.setAdjacent(EU_EAS);
		EU_EAS.setAdjacent(EU_RUS);
		EU_IT.setAdjacent(EU_BAL);

		// ASIA
		AS_YAM.setAdjacent(AS_STA);
		AS_YAM.setAdjacent(AS_SAK);
		AS_YAM.setAdjacent(EU_RUS);
		AS_YAM.setAdjacent(AS_MON);
		AS_STA.setAdjacent(AS_CHI);
		AS_STA.setAdjacent(AS_MEA);
		AS_STA.setAdjacent(EU_RUS);
		AS_STA.setAdjacent(AS_IND);
		AS_MEA.setAdjacent(AS_ARA);
		AS_MEA.setAdjacent(EU_RUS);
		AS_MEA.setAdjacent(EU_BAL);
		AS_SAK.setAdjacent(AS_MON);
		AS_SAK.setAdjacent(AS_MAC);
		AS_SAK.setAdjacent(AS_CHU);
		AS_MON.setAdjacent(AS_CHI);
		AS_MON.setAdjacent(AS_MAC);
		AS_CHI.setAdjacent(AS_IND);
		AS_CHI.setAdjacent(AS_INO);
		AS_CHI.setAdjacent(AS_MAC);
		AS_CHI.setAdjacent(AS_JAP);
		AS_JAP.setAdjacent(AS_MAC);
		AS_JAP.setAdjacent(AS_CHU);

		// Oceania
		OC_BOR.setAdjacent(AS_INO);
		OC_BOR.setAdjacent(OC_EAS);
		OC_BOR.setAdjacent(OC_OUT);
		OC_EAS.setAdjacent(OC_NEW);
		OC_OUT.setAdjacent(OC_AUS);
		OC_AUS.setAdjacent(OC_NEW);

		// Antarctica
		AN_WIL.setAdjacent(AN_QUE);
		AN_WIL.setAdjacent(OC_AUS);
		AN_QUE.setAdjacent(AN_MAR);

		// Africa
		AF_NIL.setAdjacent(AS_ARA);
		AF_NIL.setAdjacent(AF_THE);
		AF_NIL.setAdjacent(AF_ZAI);
		AF_NIL.setAdjacent(AF_MAG);
		AF_THE.setAdjacent(AF_MAD);
		AF_THE.setAdjacent(AF_CAP);
		AF_THE.setAdjacent(AF_ZAI);
		AF_CAP.setAdjacent(AF_MAD);
		AF_CAP.setAdjacent(AF_ZAI);
		AF_CAP.setAdjacent(AN_QUE);
		AF_ZAI.setAdjacent(AF_MAG);
		AF_MAG.setAdjacent(EU_IBE);

		// South America
		SA_PAR.setAdjacent(AF_MAG);
		SA_PAR.setAdjacent(SA_AMA);
		SA_PAR.setAdjacent(SA_BOL);
		SA_PAR.setAdjacent(SA_ARG);
		SA_ARG.setAdjacent(SA_BOL);
		SA_ARG.setAdjacent(AN_MAR);
		SA_BOL.setAdjacent(SA_AMA);
		SA_BOL.setAdjacent(SA_PER);
		SA_COL.setAdjacent(SA_AMA);
		SA_COL.setAdjacent(SA_PER);

		// North America
		NA_MEX.setAdjacent(SA_COL);
		NA_MEX.setAdjacent(NA_CAR);
		NA_MEX.setAdjacent(NA_SUN);
		NA_MEX.setAdjacent(NA_PAC);
		NA_SUN.setAdjacent(NA_CAR);
		NA_SUN.setAdjacent(NA_EAS);
		NA_SUN.setAdjacent(NA_PAC);
		NA_SUN.setAdjacent(NA_PLA);
		NA_PLA.setAdjacent(NA_PAC);
		NA_PLA.setAdjacent(NA_LAW);
		NA_PLA.setAdjacent(NA_EAS);
		NA_LAW.setAdjacent(NA_EAS);
		NA_LAW.setAdjacent(NA_NUN);
		NA_LAW.setAdjacent(NA_GRE);
		NA_NUN.setAdjacent(NA_PAC);
		NA_NUN.setAdjacent(NA_KLO);
		NA_NUN.setAdjacent(NA_GRE);
		NA_KLO.setAdjacent(NA_PAC);
		NA_KLO.setAdjacent(AS_CHU);
		NA_GRE.setAdjacent(EU_ICE);
	}

	@Override
	public String toString() {
		return territories.toString();
	}

	public void setTerritoryPlayer(String player, String territory) {
		allocations.put(territory, player);
	}

	public ArrayList<Territory> getPlayerTerritoriesT(String player) {
		ArrayList<Territory> playerTerritories = new ArrayList<Territory>();
		for (String ter : territories.keySet()) {
			if (allocations.get(ter).equals(player)) {
				playerTerritories.add(territories.get(ter));
			}
		}
		return playerTerritories;
	}

	public boolean isPlayersTerritory(String player, String terr) {
		if (allocations.get(terr) == null)
			return false;
		return allocations.get(terr).equals(player);
	}

	public ArrayList<String> getPlayerTerritories(String player) {
		ArrayList<String> playerTerritories = new ArrayList<String>();
		// TODO Auto-generated method stub
		for (Entry<String, String> e : allocations.entrySet()) {
			if (e.getValue().equals(player)) {
				playerTerritories.add(e.getKey());
			}
		}
		return playerTerritories;

	}

	public ArrayList<String> getEmptyTerritories() {
		ArrayList<String> empty = new ArrayList<String>();

		for (String terr : territories.keySet()) {
			if (allocations.get(terr) == null)
				empty.add(terr);
		}

		return empty;
	}

	public int getStartingSoldiersNumber(int numPlayers) {
		return 50 - numPlayers * 5;
	}

	private int sum(Integer[] a) {
		int sum = 0;
		for (int i = 0; i < a.length; i++)
			sum += a[i];
		return sum;
	}

	public void allocateRandomTerritories(ArrayList<AID> players) {

		System.out.println(players.size());

		Integer[] availableSoldiers = new Integer[players.size()];

		for (int n = 0; n < players.size(); n++) {
			availableSoldiers[n] = getStartingSoldiersNumber(players.size());
		}

		int i = 0;
		while (getEmptyTerritories().size() > 0) {
			String terr = getEmptyTerritories().get(0);
			allocations.put(terr, players.get(i).getLocalName());
			territories.get(terr).addSoldiers(1);
			availableSoldiers[i]--;

			i++;
			if (i >= players.size())
				i = 0;
		}

		while (sum(availableSoldiers) > 0) {
			ArrayList<String> playersTerritories = getPlayerTerritories(players
					.get(i).getLocalName());

			Random r = new Random();
			int pos = r.nextInt(playersTerritories.size());

			territories.get(playersTerritories.get(pos)).addSoldiers(1);
			availableSoldiers[i]--;

			i++;
			if (i >= players.size())
				i = 0;
		}

	}

	/**
	 * 
	 * @param t
	 *            The territory.
	 * @param player
	 *            The player who owns the Territory.
	 * @return
	 */
	public ArrayList<Territory> getReachables(Territory t, String player) {
		String p = allocations.get(t.getKey());

		// Check if it is the valid player
		if (!p.equals(player)) {
			return new ArrayList<Territory>();
		}

		ArrayList<Territory> visited = new ArrayList<Territory>();
		visited.add(t);
		ArrayList<Territory> r = getReachablesHelper(t, player, visited);

		return r;
	}

	private ArrayList<Territory> getReachablesHelper(Territory territory,
			String player, ArrayList<Territory> visited) {
		ArrayList<Territory> adj = getPlayerAdjacents(territory.getKey(),
				player);
		ArrayList<Territory> r = new ArrayList<Territory>();
		for (Territory t : adj) {
			if (!visited.contains(t)) {
				visited.add(t);
				r.add(t);
				r.addAll(getReachablesHelper(t, player, visited));
			}
		}
		return r;

	}

	/**
	 * Returns the immediately adjacent territories that belong to the player.
	 * 
	 * @param territory_string
	 *            The territory to check.
	 * @param player
	 *            The player.
	 * @return ArrayList<Territory> with all the territories.
	 */
	public ArrayList<Territory> getPlayerAdjacents(String territory_string,
			String player) {
		ArrayList<Territory> adj = new ArrayList<Territory>();
		Territory territory = territories.get(territory_string);
		for (Territory t : territory.getAdjacents()) {
			String p = allocations.get(t.getKey());
			if (player.equals(p)) {
				adj.add(t);
			}
		}

		return adj;
	}

	/**
	 * Returns a list of the adjacent enemy territories.
	 * 
	 * @param terr
	 *            The territory to look.
	 * @param player
	 *            The owner of the territory.
	 * @return ArrayList<Terrritory>.
	 */
	public ArrayList<Territory> getEnemyAdjacents(Territory terr, String player) {
		ArrayList<Territory> enemyAdjacents = new ArrayList<Territory>();
		for (Territory territory : terr.getAdjacents()) {
			String playerFromT = allocations.get(territory.getKey());
			if (!playerFromT.equals(player)) {
				enemyAdjacents.add(territory);
			}
		}
		return enemyAdjacents;
	}

	public boolean conquer(String from, String to) {
		Territory tFrom = territories.get(from);
		Territory tTo = territories.get(to);

		if (tFrom.getNumSoldiers() <= 1 || tTo.getNumSoldiers() > 0)
			return false;

		allocations.remove(to);
		allocations.put(to, allocations.get(from));

		tFrom.conquer(tTo);
		return true;
	}

	public String getPlayerFromTerritory(Territory t) {
		return allocations.get(t.getKey());
	}

	public int getPlayerTotalSoldiers(String player) {
		int count = 0;
		ArrayList<Territory> territories = getPlayerTerritoriesT(player);
		for (Territory territory : territories) {
			count += territory.getNumSoldiers();
		}
		return count;
	}

	// Continent tem que ser um que esta guardado em R (ex: R.EUROPE)
	public ArrayList<String> getContinent(String continent) {
		ArrayList<String> t = new ArrayList<String>();

		// Procura em todos as chaves dos territorios aqueles que comecam com
		// continent e sao validos.
		Pattern pattern = Pattern.compile(continent + "_\\w{3}");
		for (String terr : territories.keySet()) {
			Matcher matcher = pattern.matcher(terr);
			if (matcher.find()) {
				t.add(matcher.group(0));
			}
		}
		return t;
	}

	public int getContinentBonus(String player) {

		ArrayList<String> continents = getContinentList();

		int nCont = 0;

		for (String cont : continents) {
			// Encontra todos os territorios de um dado continente
			ArrayList<String> terr = getContinent(cont);
			int n = 0;

			// Encontra os territorios que o player controla no continente cont
			for (String t : terr) {
				if (allocations.get(t).equals(player)) {
					n++;
				}
			}

			// Se controlar todos os territorios do continente soma o valor do
			// continente
			if (terr.size() == n)
				nCont += getContinentValue(cont);
		}
		return nCont;
	}

	private ArrayList<String> getContinentList() {
		ArrayList<String> continents = new ArrayList<String>();
		continents.add(R.EUROPE);
		continents.add(R.NORTH_AMERICA);
		continents.add(R.SOUTH_AMERICA);
		continents.add(R.ANTARTICA);
		continents.add(R.ASIA);
		continents.add(R.AFRICA);
		continents.add(R.OCEANIA);
		return continents;
	}

	// Recebe um continete e devolve o seu valor em numero de soldados
	private int getContinentValue(String cont) {
		switch (cont) {
		case R.AFRICA:
			return R.NUM_AFRICA;
		case R.ASIA:
			return R.NUM_ASIA;
		case R.EUROPE:
			return R.NUM_EUROPE;
		case R.NORTH_AMERICA:
			return R.NUM_NORTH_AMERICA;
		case R.SOUTH_AMERICA:
			return R.NUM_SOUTH_AMERICA;
		case R.ANTARTICA:
			return R.NUM_ANTARTICA;
		case R.OCEANIA:
			return R.NUM_OCEANIA;
		}
		return 0;
	}

	public String getPlayerFromTerritory(String to) {
		return allocations.get(to);
	}

	/**
     * Returns only the player territories with more than 1 soldier and enemy adjacents.
     * @param localName
     * @return
     */
    public ArrayList<String> getReadyPlayerTerritories(String player) {
            ArrayList<String> playerTerritories = new ArrayList<String>();
            for(Entry<String, String> e: allocations.entrySet()) {
            		Territory t = getTerritory(e.getKey());
                    if(	e.getValue().equals(player)
                    	&& territories.get(t.getKey()).getNumSoldiers() > 1
                    	&& getEnemyAdjacents(t, player).size() >= 1
                    		) {
                            playerTerritories.add(e.getKey());
                    }
            }
            return playerTerritories;
    }
<<<<<<< HEAD

	public ArrayList<String> canConquerContinent(String player) {
		//Territories in the frontline
		ArrayList<String> frontLine = getReadyPlayerTerritories(player);
		
		
		
		return frontLine;
	}
=======
    
    /**
     * Returns only the player territories with enemy adjacencies.
     * @param localName
     * @return
     */
    public ArrayList<String> getFortifyReadyPlayerTerritories(String player) {
            ArrayList<String> playerTerritories = new ArrayList<String>();
            for(Entry<String, String> e: allocations.entrySet()) {
            		Territory t = getTerritory(e.getKey());
                    if(	e.getValue().equals(player) && getEnemyAdjacents(t, player).size() >= 1 ) {
                            playerTerritories.add(e.getKey());
                    }
            }
            return playerTerritories;
    }
>>>>>>> 84797eb18036b99054382c6584e5fd78371c2b98
}
